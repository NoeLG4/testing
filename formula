# This formula changes the input matrix [1 ind/ 1row] to a matrix [1 ind./ n rows] where n is the maximum ploidy of the set
# in the output matrix each column represents one locus (input for STRUCTURE and other softwares)

##########################
## CHANGE MATRICES FORMATS
##########################

path_to_my_matrix <- "..."
setwd(path_to_my_matrix)

## load the matrix 1 indiv./1 row (alleles separated by /t)

data <- read.csv2("example.data.csv", header=T)

## col_inf: number of columns of information about the sample (=6 in the example)
## col_genotyping: number of alleles (columns which represents genotyping; =12 in the example)
## max_ploidy: maximum ploidy of the dataset (=6 in the example)

oneRowToN <- function(x, col_inf, col_genotyping, max_ploidy) { 
  num_col_set <- col_inf + col_genotyping
  num_indiv <- nrow(x)
  num.rows.needed <- max_ploidy*num_indiv
  
  output <- data.frame(matrix("", ncol = num_col_set, nrow = max_ploidy),stringsAsFactors=FALSE)
  output_final <- data.frame(matrix("", ncol = num_col_set, nrow = num.rows.needed),stringsAsFactors=FALSE)
  
  k=num_indiv
  
  
  ## establish the start/end columns for each marker (locus)
  
  lim_ini_col <- seq(from=col_inf+1,to=ncol(x),by=max_ploidy)
  lim_ini_col
  lim_fin_col <- lim_ini_col+(max_ploidy-1)
  lim_fin_col 
  
  ## checkpoint
  if(length(lim_fin_col)==col_genotyping){
    
    print("IT SEEMS IT IS WORKING ;)")
    print("CHECK YOUR WORKING DIRECTORY")
    
  } else {
    
    print("SOMETHINNG IS WRONG")
  }
  
  ## ¡TRUE! IF THE MESSAGE IS "FALSE", SOMETHING IS WRONG
  
  ## AND NOW IT STARTS
  
  for (i in 1:k) {
    filaN<-x[i,]
    
    for (j in 1:col_inf) {
      output[,j]<-rep(filaN[,j],max_ploidy)
    }
    
    for (z in 1:col_genotyping) {
      output[, col_inf+z]<-t(filaN[,lim_ini_col[z]:lim_fin_col[z]])
    }
    
    output_final[((i*max_ploydy)-(max_ploydy-1)):(i*max_ploydy), 1:num_col_set]<-output
  }
  
  names(output_final)[1:col_info]<- names(x)[1:col_inf]
  write.table(output_final, file="outputCheck.csv", row.names=FALSE, quote=FALSE, sep=";")
  return("¡¡information columns may have changed!!")
}

data
getwd()
oneRowToN(data)

